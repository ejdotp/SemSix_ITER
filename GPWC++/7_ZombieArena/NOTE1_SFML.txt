TIMBER MAN GAME
--------------

Timberman is a fast-paced arcade game where players take on the role of a lumberjack chopping down a tree while avoiding falling branches. 


The goal is to chop as much as possible before running out of time or getting hit by a falling branch. The player must avoid them while chopping the tree down.



Gameplay Mechanics :
-------------------

The player must chop a tree by pressing the left or right keys.

Each chop removes part of the tree and causes branches to move down.

The player needs to avoid getting hit by branches.

The game has a time limit—chopping quickly increases the remaining time.

This gravestone is drawn when the player dies in the game.

If player chops to the left, Log moves to the RIGHT. If player chops to the right, Log moves to the LEFT.




1. Chopping the Tree
--------------------

The player chops the tree by pressing the Left or Right arrow keys.

Each chop removes part of the tree, making it shorter.

The player must quickly decide which side to chop based on the position of the branches.


2. Avoiding Branches
-------------------

After every chop, branches move downward.

If a branch touches the player’s position, the game ends.

The player must switch sides carefully to avoid getting hit.


3. Time Limit & Score System
-----------------------------

The player starts with limited time.

Each successful chop increases the remaining time based on the score:
Formula: timeRemaining += (2 / score) + 0.15;

If time runs out, the player loses.


4. Log Movement
----------------

The game adds a visual effect where a log flies off in the opposite direction of the chop.

If the player chops to the LEFT - Log flies to the RIGHT.

If the player chops to the RIGHT - Log flies to the LEFT.


5. Player Death Mechanic
-------------------------

If the player is hit by a branch:

The game pauses (paused = true).

The "SQUISHED!!" message appears.

A gravestone (spriteRIP) is drawn at the player’s last position.

The player disappears from the screen.

A death sound plays.


6. Added
--------------------------

As the score increases, the game becomes more challenging:

Time bonus per chop decreases : Forces faster decision-making.

More branches appear : Less room to move safely.

The log flies faster : Creates a more dynamic visual effect.






Objective 1: Understanding Video Mode & Gaming Window Creation
--------------------------------------------------------

Expected Output :

1. Creating a windrow with actual resolution of 1920 x 1080, where we will place different objects. 

2. A fullscreen black window appears.

3. Event Loop: Captures and processes user inputs. Pressing Escape will close it.



// used for drawing shapes, images, and handling positions.

#include <SFML/Graphics.hpp>

// allows to use SFML classes directly without needing to prefix them with sf::

using namespace sf;

int main()
{
    //Define the window size (1920x1080 pixels)
    VideoMode vm(1920, 1080);

    //Create a window with this canvas size
    RenderWindow window(vm, "Timber!!!", Style::Fullscreen);

    // Keep the window open
    while (window.isOpen())
    {
        //Close window if 'Escape' key is pressed
        if (Keyboard::isKeyPressed(Keyboard::Escape))
        {
            window.close();
        }

        //Clear the screen before drawing the next frame
        window.clear();
        
        // Display new frame
        window.display();
    }

    return 0;
}





NOTE


Loads textures for additional game objects
------------------------------------------

Tree: A static object in the game. The tree at (810, 0), meaning it is placed at x=810, y=top of the screen.

Bee: A moving object that will fly across the screen. The bee starts off the screen at (0, 800).

Clouds: Three independent cloud sprites moving at different speeds. The clouds start at different heights but off-screen, ready to enter from the left.




Rendering section follows a clear sequence:
----------------------------------------------

Clear the screen : window.clear();

Draw elements in order:

Background
Clouds
Tree
Bee
UI elements (Draw score, Draw time bar)


Display everything : window.display();







Objective 2: Adding a Background Image (Asset). Place a background image inside this window. (Static Object)
-----------------------------------------

Expected Output :

If background.png exists in the graphics/ folder, it will fill the screen with that image.


// A texture in SFML is like an image file (PNG, JPG) that you load into memory.
// It stores pixel data but cannot be drawn directly to the screen.
// You can think of it as a large poster or wallpaper that you place on a wall but haven't yet cut or positioned.

Texture textureBackground;


// Loads an image but doesn't display it yet

textureBackground.loadFromFile("graphics/background.png"))


// Create a object sprite and Assigns texture to the sprite.
// A sprite is an object that displays a part of the texture on the screen.
// It is like cutting out a part of the wallpaper (texture) and pasting it onto a board (screen).
// setTexture(): Assigns the texture to the sprite.

Sprite spriteBackground;
spriteBackground.setTexture(textureBackground);


//Places the sprite at the left-top corner (0,0)

spriteBackground.setPosition(0, 0);


// background image is now visible on the screen.

window.clear();                // Clear previous frame

window.draw(spriteBackground); // Draw the background

window.display();              // Show the frame






NOTE:  SFML Coordinates
--------------------------

SFML uses a 2D coordinate system:

(0,0) is the left-top corner.

X increases  Right
Y increases  Down

Example Calculation : 

Sprite Position	     Coordinates (X, Y)
Left-Top	          (0, 0)
Center	                (960, 540)
Right-Bottom	       (1920, 1080) (window width,Height)

Example :

1. Suppose, To move the sprite to the center: spriteBackground.setPosition(960, 540);


2. In SFML, the default position of a sprite is at (0,0), meaning its top-left corner starts at (0,0).
Suppose, you're moving the top-left corner of the sprite to a new position so that its center aligns with (960, 540).


you have a sprite of size 200 x 100 (width = 200, height = 100).
Its top-left corner is at (0,0). So its center is at (100, 50).
If you want to place it at (960, 540), then, The top-left corner moves to (960, 540), But the center moves to (1060, 590) (wrong position).

To fix this, subtract half its width and height:
spriteBackground.setPosition(960 - 100, 540 - 50); // Moves top-left to (860, 490)

To center a sprite, you must subtract half its width & height from the target position

 // Get sprite size

 FloatRect spriteBounds = spriteBackground.getLocalBounds();
 float spriteWidth = spriteBounds.width;
 float spriteHeight = spriteBounds.height;

// Center the sprite

spriteBackground.setPosition(960 - spriteWidth / 2, 540 - spriteHeight / 2);





Objective 3: Adding a Tree image inside this window (Static Object)
-----------------------------------------

// prepare the tree

Texture textureTree;
textureTree.loadFromFile("graphics/tree.png");

Sprite spriteTree;
spriteTree.setTexture(textureTree);
spriteTree.setPosition(810, 0);


The X-coordinate is 810, placing the sprite 810 pixels from the left.
The Y-coordinate is 0, placing the sprite at the top of the window.


// Draw a tree

window.clear();

window.draw(spriteBackground);

window.draw(spriteTree);

window.display();





Objective 4: Place a Bee image inside this window. Moving the Bee (Dynamic Object)
-----------------------------------------------

The bee moves from right to left, disappearing and then reappearing at random heights.


A.  Prepare the bee
------------------

Texture textureBee;
textureBee.loadFromFile("graphics/bee.png");

Sprite spriteBee;
spriteBee.setTexture(textureBee);


spriteBee.setPosition(0, 800); // Start position (bottom-left)


x = 0 : at the leftmost part of the screen. It is at the extreme left of the screen.
y = 800 : 800 pixels from the top.


B. Draw a bee 
-------------

window.clear();

window.draw(spriteTree);
window.draw(spriteBee);

window.display();





C. Moving the Bee
-------------------------------

// Is the bee currently moving? (beeActive determines if it's currently moving)

bool beeActive = false;


// How fast can the bee fly (beeSpeed stores how fast it moves)

float beeSpeed = 0.0f;




D. Randomizing the Bee’s Movement
--------------------------------

The bee should appear at random heights and speeds when it respawns.


#include <cstdlib>
#include <ctime>


// Variables to control time itself
Clock clock;



while (window.isOpen())
{
 
// Measure time

Time dt = clock.restart();


// If bee is not active, set it up

if (!beeActive)
{
    srand((int)time(0));  // Seed with current time

    beeSpeed = (rand() % 200) + 200; // Random speed between 200-400
    float height = (rand() % 500) + 500; // Random height between 500-1000

    spriteBee.setPosition(2000, height); // The bee starts off-screen at X = 2000.  Start off-screen on the right that means outside of the window (2000 pixels from left, measure height from top)
    
    beeActive = true;
}



NOTE:

srand((int)time(0) * 10);  //random number generator with the current time (multiplied by 10). srand(time(0)) remains constant for a whole second. When generating multiple random values in the same second (setting different speeds for objects).

srand(time(0));
int num1 = rand() % 100;
int num2 = rand() % 100;
int num3 = rand() % 100;
std::cout << num1 << " " << num2 << " " << num3 << std::endl;

Output (if run within the same second multiple times):
42 17 89
42 17 89
42 17 89


beeSpeed  //rand() % 200 generates a number between 0 and 199. Adding 200 makes the final range 200 to 400.



rand() Vs srand()
----------------

rand() :Generates a pseudo-random number [int r = rand() % 100; // 0 to 99]

srand(seed) : Seeds the random number generator to ensure different results each run [srand(time(0));]




Moving the Bee
-------------

Once active, the bee moves left at its random speed.
moving the bee sprite from right to left across the screen. 
If the bee moves completely off the screen, it is reset to be inactive.

else
{
    spriteBee.setPosition(
        spriteBee.getPosition().x - (beeSpeed * dt.asSeconds()),
        spriteBee.getPosition().y
    );

    // If bee moves off-screen, reset it
    // checking if the bee has moved completely off the screen to the left
    // If it has, the bee is deactivated so it can be reset and reused.

    if (spriteBee.getPosition().x < -100)
    {
        beeActive = false;
    }
}



NOTE

spriteBee.getPosition().x : Gets the current X-position of the bee.

beeSpeed * dt.asSeconds() : Calculates the distance to move.

beeSpeed is the speed of the bee (random between 200 to 400 pixels per second).

dt.asSeconds() is the time elapsed since the last frame, ensuring frame-independent movement.

New X Position: The bee moves left by subtracting the calculated movement from its X position.
Y-position remains unchanged (spriteBee.getPosition().y), so the bee stays at the same height.




If the bee moves past X = -100, it is considered "out of the screen."
The bee is deactivated (beeActive = false;) so it can be reset in the if (!beeActive) condition.

-100 Instead of 0?  The bee sprite may still be partially visible at X = 0 depending on its size.




Example:
--------
To calculate an example of how far the bee moves per frame.

beeSpeed = 300 pixels per second.
dt.asSeconds() = 0.016 (assuming If a game runs at 60 FPS, Frame time = 1/60 = 0.016 seconds per frame).

Movement per frame: Distance = 300 * 0.016 = 4.8 pixels per frame

So, if the bee was at X = 2000, the new position would be:
New X = 2000 - 4.8 = 1995.2

This happens every frame, making the bee smoothly move left. Every frame, it moves left by (beeSpeed * dt.asSeconds()) pixels.




What Happens Without dt.asSeconds()?
-----------
If you moved the bee with a fixed value like:

spriteBee.setPosition(spriteBee.getPosition().x - 5, spriteBee.getPosition().y);

At 60 FPS, the bee moves 5 * 60 = 300 pixels per second. (Smooth)
At 30 FPS, the bee moves 5 * 30 = 150 pixels per second.  (Slower movement)
At 120 FPS, the bee moves 5 * 120 = 600 pixels per second. (Faster movement)

However, the actual movement is dynamically controlled by dt.asSeconds() so it works for any frame rate.







Objective 5: Moving the Clouds (Dynamic Objects)
------------------------------------------

The clouds move rightward and reset when they go off-screen.


A. Create a texture & Sprite for clouds
-------------------------

Texture textureCloud;
textureCloud.loadFromFile("graphics/cloud.png");


Sprite spriteCloud1, spriteCloud2, spriteCloud3;
spriteCloud1.setTexture(textureCloud);
spriteCloud2.setTexture(textureCloud);
spriteCloud3.setTexture(textureCloud);


// Initial Cloud Positions

spriteCloud1.setPosition(0, 0);
spriteCloud2.setPosition(0, 150);
spriteCloud3.setPosition(0, 300);



B. Draw 3 clouds
-----------------

window.clear();

window.draw(spriteBackground);

window.draw(spriteCloud1);
window.draw(spriteCloud2);
window.draw(spriteCloud3);

window.draw(spriteTree);

window.draw(spriteBee);

window.display();



NOTE: Order Matters

Background first (so it's behind everything).
Clouds next (since they move behind the tree).
Tree after that.
Bee last (so it appears in front).




C. Moving the all clouds
------------------------

// Track active state and speed

bool cloud1Active = false;
bool cloud2Active = false;
bool cloud3Active = false;


float cloud1Speed = 0.0f; 
float cloud2Speed = 0.0f;
float cloud3Speed = 0.0f;



D. Randomizing Cloud Movement
-----------------------------

Each cloud starts off-screen and moves rightward at a random speed.


Speed is randomly chosen between 0-200 pixels/sec.

Height is randomized within 150 pixels.


if (!cloud1Active)
{
    srand((int)time(0) * 10);
    cloud1Speed = (rand() % 200);

    srand((int)time(0) * 10);
    float height = (rand() % 150);
    
    spriteCloud1.setPosition(-200, height); // Start off-screen (left)
    cloud1Active = true;
}



Moving Clouds
-------------

Moves right at cloud1Speed pixels per second.

If it moves past 1920px, reset it.


else
{
    spriteCloud1.setPosition(
        spriteCloud1.getPosition().x + (cloud1Speed * dt.asSeconds()),
        spriteCloud1.getPosition().y
    );

    if (spriteCloud1.getPosition().x > 1920)
    {
        cloud1Active = false;
    }
}



----------------------------------------------------------------------------
Summary :

The tree stays static.
The bee moves left, disappearing & reappearing at random heights.
The clouds move right, disappearing & respawning at different speeds.
Pressing Escape closes the game.






Objective 6: Time Management (Creates a time bar visually represents remaining game time)
------------------------------------------

RectangleShape Class
--------------------

setSize(Vector2f(width, height)) - Sets the size of the rectangle.

setFillColor(Color::Red)- Changes the fill color.

setPosition(float x, float y) - Sets the position in the window.

setOutlineThickness(float thickness) - Adds an outline to the shape.

setOutlineColor(Color::Black) - Sets the outline color.

setRotation(float angle) - Rotates the rectangle.




A.  Variables to control time itself
-------------------------------------

// Creates an SFML clock that tracks elapsed time.

Clock clock;
	

B. Creating and Positioning the Time Bar
----------------------------------------

//The time bar starts at 400 pixels wide.

RectangleShape timeBar;

float timeBarStartWidth = 400;
float timeBarHeight = 80;

timeBar.setSize(Vector2f(timeBarStartWidth, timeBarHeight));

timeBar.setFillColor(Color::Red);


// 1920 / 2 = 960 (center of the screen).
// 960 - 400 / 2 = 760 → Centers the time bar horizontally.
// 980 sets its vertical position near the bottom of the screen.

timeBar.setPosition((1920 / 2) - timeBarStartWidth / 2, 980);



Time gameTimeTotal;

float timeRemaining = 6.0f; //The player starts with 6 seconds of playtime.

// This calculates how much width to remove per second from the time bar. 
// Example: If the initial time bar width is 400 pixels and timeRemaining = 6
// This means every second, the bar shrinks by 66.67 pixels

float timeBarWidthPerSecond = timeBarStartWidth / timeRemaining;



C. Track whether the game is running
-----------------------------------

// The game starts in a paused state (paused = true).

bool paused = true;

int score = 0;



D. Start the game
-----------------

// When the player presses Enter (Return), the game resets:
// Unpauses (paused = false).
// Resets the score (score = 0).
// Sets time remaining to 5 seconds.

		
if (Keyboard::isKeyPressed(Keyboard::Return)) {
			
paused = false;						
score = 0; // Reset the time and the score
			
timeRemaining = 5;

}



E. Updating Time Bar in Each Frame
-----------------------------

if (!paused)
{

1. Measure time
2. Setup the bee
3. Manage the clouds
4. Update the score text

}// End if(!paused)




// Measure time

Time dt = clock.restart();


// Subtract from the amount of time remaining

timeRemaining -= dt.asSeconds();


// Each frame, the timeRemaining decreases. The width of the time bar is updated using:

timeBar.setSize(Vector2f(timeBarWidthPerSecond * timeRemaining, timeBarHeight));
			
			
if (timeRemaining <= 0.0f) {

paused = true; //Game pauses when timeRemaining hits 0

// // Change the message shown to the player(Next Onjective Code)

}


F. Draw the timebar
-------------------

window.draw(timeBar);



Summary :
----------
Time Remaining	  Time Bar Width (pixels)
6.0 sec			400
5.0 sec			333
4.0 sec			266


Tracks elapsed time using SFML’s Clock.
Reduces timeRemaining each frame based on dt.asSeconds().
Dynamically shrinks the time bar based on remaining time.
Pauses the game when time runs out.
Can restart by pressing Enter.



---------SKP---------------